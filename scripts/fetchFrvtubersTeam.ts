import dotenv from 'dotenv'
import fs from 'fs/promises'
import path from 'path'

dotenv.config()

type FetchResponse = {
  ok: boolean
  status: number
  json(): Promise<any>
  text(): Promise<string>
}

type FetchLike = (input: string, init?: any) => Promise<FetchResponse>

const ensureFetch = (): FetchLike => {
  const fn = (globalThis as any).fetch as FetchLike | undefined
  if (!fn) {
    throw new Error(
      'Global fetch API is not available. Please use Node.js >= 18 to run this script.',
    )
  }
  return fn
}

const fetchFn = ensureFetch()

type TwitchTokenResponse = {
  access_token: string
  expires_in: number
  token_type: string
}

type TwitchTeamResponse = {
  data?: TwitchTeamEntry[]
}

type TwitchTeamEntry = {
  team_name: string
  team_display_name: string
  users?: TwitchTeamUser[]
}

type TwitchTeamUser = {
  user_id: string
  user_login: string
  user_display_name: string
}

const main = async () => {
  const clientId = process.env.TWITCH_CLIENT_ID
  const clientSecret = process.env.TWITCH_CLIENT_SECRET
  const teamName = process.env.TWITCH_TEAM_NAME ?? 'frvtubers'

  if (!clientId || !clientSecret) {
    throw new Error(
      'Missing TWITCH_CLIENT_ID or TWITCH_CLIENT_SECRET environment variables.',
    )
  }

  const token = await getAppAccessToken(clientId, clientSecret)
  const team = await getTeamMembers(clientId, token, teamName)
  if (!team) {
    throw new Error(`Unable to find Twitch team with name "${teamName}".`)
  }

  const members = (team.users ?? []).map((user) => ({
    userId: user.user_id,
    userLogin: user.user_login,
    displayName: user.user_display_name,
  }))

  const generatedAt = new Date().toISOString()
  const fileHeader = `// Auto-generated by scripts/fetchFrvtubersTeam.ts on ${generatedAt}\n// Do not edit manually.\n\n`
  const interfaceBlock = `export interface FrVtubersTeamMember {\n  userId: string\n  userLogin: string\n  displayName: string\n}\n\n`
  const timestampExport = `export const frVtubersTeamGeneratedAt = '${generatedAt}'\n\n`
  const membersExport = `export const frVtubersTeamMembers: FrVtubersTeamMember[] = ${JSON.stringify(
    members,
    null,
    2,
  )}\n`

  const output = `${fileHeader}${interfaceBlock}${timestampExport}${membersExport}`

  const outputPath = path.resolve(
    __dirname,
    '../src/data/generated/frvtubersTeam.ts',
  )
  await fs.mkdir(path.dirname(outputPath), { recursive: true })
  await fs.writeFile(outputPath, output, 'utf8')

  console.log(
    `Wrote ${members.length} team members to src/data/generated/frvtubersTeam.ts`,
  )
}

const getAppAccessToken = async (
  clientId: string,
  clientSecret: string,
): Promise<string> => {
  const params = new URLSearchParams({
    client_id: clientId,
    client_secret: clientSecret,
    grant_type: 'client_credentials',
  })

  const response = await fetchFn('https://id.twitch.tv/oauth2/token', {
    method: 'POST',
    body: params,
  })

  if (!response.ok) {
    const body = await response.text()
    throw new Error(
      `Failed to retrieve Twitch app token (${response.status}): ${body}`,
    )
  }

  const data = (await response.json()) as TwitchTokenResponse
  return data.access_token
}

const getTeamMembers = async (
  clientId: string,
  token: string,
  teamName: string,
): Promise<TwitchTeamEntry | undefined> => {
  const url = new URL('https://api.twitch.tv/helix/teams')
  url.searchParams.set('name', teamName)

  const response = await fetchFn(url.toString(), {
    headers: {
      'Client-ID': clientId,
      Authorization: `Bearer ${token}`,
    },
  })

  if (!response.ok) {
    const body = await response.text()
    throw new Error(
      `Failed to fetch Twitch team (${response.status}): ${body}`,
    )
  }

  const data = (await response.json()) as TwitchTeamResponse
  return data.data?.[0]
}

main().catch((err) => {
  console.error(err)
  process.exit(1)
})
